generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== ENUMS ====================

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}

enum INTEGRATIONS {
  INSTAGRAM
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum LISTENERS {
  SMARTAI
  MESSAGE
}

// ==================== MODELS ====================

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId       String         @unique     
  email         String         @unique
  firstname     String         
  lastname      String         
  createdAt     DateTime       @default(now()) 

  subscription  Subscription?
  automations   Automation[]  // One-to-many
  integrations  Integration[] // One-to-many
}

model Subscription {
  id           String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user         User               @relation(fields: [userId], references: [id])
  userId       String             @unique @db.Uuid
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  plan         SUBSCRIPTION_PLAN  @default(FREE)
  customerId   String             @unique
}

model Automation {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String        @default("Untitled")
  createdAt    DateTime      @default(now())
  active       Boolean       @default(false)

  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?       @db.Uuid

  trigger      Trigger[]     
  listener     Listner?
  posts        Post[]
  dms          Dms[]
  keywords     Keyword[]
}

model Dms {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime       @default(now())
  senderId     String?
  receiver     String?
  message      String?

  automation   Automation?    @relation(fields: [automationId], references: [id])
  automationId String?        @db.Uuid
}

model Post {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId       String
  caption      String?
  media        String
  mediaType    MEDIATYPE      @default(IMAGE)

  automation   Automation?    @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?        @db.Uuid
}

model Integration {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         INTEGRATIONS   @default(INSTAGRAM)
  createdAt    DateTime       @default(now())
  token        String         @unique
  expireAt     DateTime? 
  intagramId   String?        @unique

  userId       String?        @db.Uuid
  user         User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Listner {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  automation   Automation     @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String         @unique @db.Uuid

  listener     LISTENERS      @default(MESSAGE)
  prompt       String
  commonReply  String?
  dmCount      Int            @default(0)
  commentCount Int            @default(0)
}

model Trigger {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type         String

  automation   Automation?    @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?        @db.Uuid
}

model Keyword {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word         String

  automation   Automation?    @relation(fields: [automationId], references: [id])
  automationId String?        @db.Uuid

  @@unique([automationId, word]) // Ensures a keyword can't be reused for the same automation
}
